package main

import (
	"crypto"
	"crypto/rand"
	"crypto/rsa"
	"crypto/sha256"
	"crypto/x509"
	"encoding/hex"
	"encoding/pem"
	"fmt"
)

type RSAKey struct {
	keySize    int
	privateKey *rsa.PrivateKey
	publicKey  *rsa.PublicKey
}

func (rsaKey *RSAKey) GenerateKeypair(keySize int) {
	rsaKey.keySize = keySize
	var err error
	rsaKey.privateKey, err = rsa.GenerateKey(rand.Reader, keySize)
	if err != nil {
		panic(err.Error())
	}
	rsaKey.publicKey = &rsaKey.privateKey.PublicKey
}

func (rsaKey *RSAKey) X509encodePrivateKey() (bytes []byte) {
	var pemPrivateBlock = &pem.Block{
		Type:  "RSA PRIVATE KEY",
		Bytes: x509.MarshalPKCS1PrivateKey(rsaKey.privateKey),
	}
	bytes = pem.EncodeToMemory(pemPrivateBlock)
	return
}

func (rsaKey *RSAKey) X509encodePublicKey() (bytes []byte) {
	var pemPublicBlock = &pem.Block{
		Type:  "RSA PUBLIC KEY",
		Bytes: x509.MarshalPKCS1PublicKey(rsaKey.publicKey),
	}
	bytes = pem.EncodeToMemory(pemPublicBlock)
	return
}

func (rsaKey RSAKey) EncryptOAEP(message []byte) (ciphertext []byte) {
	label := []byte("")
	hash := sha256.New()
	ciphertext, err := rsa.EncryptOAEP(hash, rand.Reader, rsaKey.publicKey, message, label)
	if err != nil {
		panic(err.Error())
	}
	return
}

func (rsaKey RSAKey) SignPSS(message []byte) (signature []byte) {
	var opts rsa.PSSOptions
	opts.SaltLength = rsa.PSSSaltLengthAuto
	hasher := crypto.SHA256
	pssh := hasher.New()
	pssh.Write(message)
	checksum := pssh.Sum(nil)
	signature, err := rsa.SignPSS(rand.Reader, rsaKey.privateKey, hasher, checksum, &opts)
	if err != nil {
		panic(err.Error())
	}
	return
}

func (rsaKey RSAKey) DecryptOAEP(ciphertext []byte) (plaintext []byte) {
	label := []byte("")
	hash := sha256.New()
	plaintext, err := rsa.DecryptOAEP(hash, rand.Reader, rsaKey.privateKey, ciphertext, label)
	if err != nil {
		panic(err.Error())
	}
	return
}

func (rsaKey RSAKey) VerifyPSS(message []byte, signature []byte) {
	var opts rsa.PSSOptions
	opts.SaltLength = rsa.PSSSaltLengthAuto
	hasher := crypto.SHA256
	pssh := hasher.New()
	pssh.Write(message)
	checksum := pssh.Sum(nil)
	err := rsa.VerifyPSS(rsaKey.publicKey, hasher, checksum, signature, &opts)
	if err != nil {
		panic(err.Error())
	} else {
		fmt.Println("[INFO] Signature Verified")
	}
}

func main() {
	message := "Hello, World!"

	AliceKey := RSAKey{}
	AliceKey.GenerateKeypair(2048)
	fmt.Println("[DEBUG] Keys  generated by Alice  : ")
	fmt.Println(string(AliceKey.X509encodePrivateKey()))
	fmt.Println(string(AliceKey.X509encodePublicKey()))

	BobKey := RSAKey{}
	BobKey.GenerateKeypair(2048)
	fmt.Println("[DEBUG] Keys generated by Bob : ")
	fmt.Println(string(BobKey.X509encodePrivateKey()))
	fmt.Println(string(BobKey.X509encodePublicKey()))

	fmt.Println("[INFO] Bob Encrypts the Text Message with Alice's public key and signs with Bob's private key")
	ciphertext := AliceKey.EncryptOAEP([]byte(message))
	signature := BobKey.SignPSS([]byte(message))

	// Mess with this to test signature verification
	signature, _ = hex.DecodeString(hex.EncodeToString(signature)[:])

	fmt.Println("[DEBUG] Ciphertext : ", hex.EncodeToString(ciphertext))
	fmt.Println("[DEBUG] Signature  : ", hex.EncodeToString(signature))

	fmt.Println("[INFO] Alice Decrypts the ciphertext with her private key and verifies signature with Bob's public key")
	plaintext := AliceKey.DecryptOAEP(ciphertext)
	fmt.Println("[INFO] Plaintext decrypted : ", string(plaintext))
	BobKey.VerifyPSS(plaintext, signature)

}
